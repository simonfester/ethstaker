---
- name: Ethereum Validator Node OS Configuration, Security Hardening, and Docker Installation
  hosts: validator_node
  become: true
  gather_facts: yes
  vars:
    upgrade_os: "flase"
    eth_user: "mandem"
    timezone: "Asia/Bangkok"
    ssh_public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    logwatch_email: "simonfester@icloud.com"
    required_ports: "30303,9000,9001"
    mount_point: "/mnt/data/"
    drive_model: "Samsung SSD 990 PRO 4TB"
    filesystem_type: "ext4"

  tasks:
    - name: Find the 3.6TB Samsung SSD disk
      command: "lsblk -J -o NAME,SIZE,MODEL,TYPE,MOUNTPOINT,FSTYPE"
      register: lsblk_output
      changed_when: false

    - name: Parse the correct 3.6TB Samsung SSD disk
      set_fact:
        data_disk: >-
          {{
            (lsblk_output.stdout | from_json).blockdevices
            | selectattr('type', 'equalto', 'disk')
            | selectattr('size', 'equalto', '3.6T')
            | selectattr('model', 'search', 'Samsung SSD 990 PRO')
            | map(attribute='name')
            | first | default('')
          }}

    - name: Fail if the expected 3.6TB Samsung SSD is not found
      fail:
        msg: "No 3.6TB Samsung SSD 990 PRO disk found!"
      when: data_disk == ''

    - name: Set full disk path
      set_fact:
        data_disk_path: "/dev/{{ data_disk }}"

    - name: Debug selected disk
      debug:
        msg: "Selected disk for /mnt/data: {{ data_disk_path }}"

    - name: Check if {{ data_disk_path }} is already formatted
      command: "blkid {{ data_disk_path }}"
      register: disk_format_status
      ignore_errors: yes
      changed_when: false

    - name: Format {{ data_disk_path }} as ext4 if not formatted
      filesystem:
        fstype: ext4
        dev: "{{ data_disk_path }}"
      when: disk_format_status.rc != 0

    - name: Create /mnt/data directory if it does not exist
      file:
        path: /mnt/data
        state: directory
        mode: '0755'

    - name: Get the UUID of {{ data_disk_path }}
      command: blkid -s UUID -o value {{ data_disk_path }}
      register: disk_uuid
      changed_when: false
      ignore_errors: yes

    - name: Store expected UUID as a variable
      set_fact:
        expected_uuid: "UUID={{ disk_uuid.stdout }}"

    - name: Get current mount source
      command: findmnt --noheadings --output SOURCE /mnt/data
      register: current_mount_source
      changed_when: false
      ignore_errors: yes

    - name: Get current mount options
      command: findmnt --noheadings --output OPTIONS /mnt/data
      register: current_mount_options
      changed_when: false
      ignore_errors: yes

    - name: Debug mount status and options
      debug:
        msg: "Current mount source: {{ current_mount_source.stdout }}, options: {{ current_mount_options.stdout }}"

    - name: Mount /dev/nvme0n1 to /mnt/data only if needed
      when: 
        - current_mount_source.stdout | trim != expected_uuid
        - "'defaults' not in current_mount_options.stdout"
      block:
        - name: Perform Mount Operation
          mount:
            path: /mnt/data
            src: "{{ expected_uuid }}"
            fstype: ext4
            opts: "defaults"
            state: mounted

    - name: Check if /etc/fstab already contains the correct entry
      shell: grep -E "UUID={{ disk_uuid.stdout }}[[:space:]]+/mnt/data[[:space:]]+ext4" /etc/fstab
      register: fstab_check
      changed_when: false
      ignore_errors: yes

    - name: Ensure /mnt/data persists in /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: "^UUID={{ disk_uuid.stdout }}[[:space:]]+/mnt/data"
        line: "{{ expected_uuid }} /mnt/data ext4 defaults 0 2"
        state: present
      when: fstab_check.rc != 0

    - name: Update apt package index
      apt:
        update_cache: yes
        force_apt_get: yes

    - name: Install packages to allow apt to use a repository over HTTPS
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Set up the Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker Engine
      apt:
        name: docker-ce
        state: latest

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: true

    - name: Add user to Docker group
      user:
        name: "{{ eth_user }}"
        groups: docker
        append: yes
        state: present

    # Ethereum Validator Node Configuration and Security Hardening
    - name: Check if the user already exists
      command: id -u {{ eth_user }}
      register: user_exists
      ignore_errors: yes
      changed_when: false

    - name: Ensure all packages are up to date
      apt:
        update_cache: yes
        upgrade: dist
      notify:
        - Reboot system

    - name: Install necessary packages
      apt:
        name:
          - git
          - ufw
          - curl
          - ccze
          - jq
          - chrony
          - fail2ban
          - unattended-upgrades
          - logwatch
          - apparmor
          - ncdu
          - cron
          - vim
          - netcat-openbsd
        state: present

    - name: Remove unnecessary packages
      apt:
        name: "{{ item }}"
        state: absent
      loop:
        - autoremove
        - autoclean
    
    - name: Set system timezone
      timezone:
        name: "{{ timezone }}"

    - name: Verify chrony synchronization source
      command: "chronyc sources"
      changed_when: false

    - name: Verify chrony tracking
      command: "chronyc tracking"
      changed_when: false

    # UFW and SSH Configuration
    - name: Configure UFW to deny all incoming traffic
      ufw:
        default: deny
        direction: incoming

    - name: Configure UFW to allow all outgoing traffic
      ufw:
        default: allow
        direction: outgoing

    - name: Allow SSH in UFW
      ufw:
        rule: allow
        port: 22
        proto: tcp
        comment: 'Allow SSH port'

    - name: Enable UFW
      ufw:
        state: enabled

    - name: Configure Fail2ban for SSH
      blockinfile:
        path: /etc/fail2ban/jail.local
        create: yes
        block: |
          [sshd]
          enabled = true
          port = 22
          filter = sshd
          logpath = /var/log/auth.log
          maxretry = 3

    - name: Restart Fail2ban
      service:
        name: fail2ban
        state: started
        enabled: true

    - name: Add SSH public key for {{ eth_user }}
      authorized_key:
        user: "{{ eth_user }}"
        state: present
        key: "{{ ssh_public_key }}"

    - name: Disable SSH password authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
      notify: Restart SSH

    - name: Enable SSH key-based authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
        state: present
      notify: Restart SSH

    - name: Disable root login over SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin no'
        state: present
      notify: Restart SSH

    - name: Enable automatic security updates
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        line: 'APT::Periodic::Unattended-Upgrade "1";'

    - name: Enable and start AppArmor for process isolation
      service:
        name: apparmor
        state: started
        enabled: yes

    - name: Set up daily Logwatch emails for log auditing
      cron:
        name: "Daily Logwatch"
        job: "/usr/sbin/logwatch --output mail --mailto {{ logwatch_email }} --detail high"
        state: present
        minute: "0"
        hour: "0"

    - name: Set default value for os_upgrade
      set_fact:
        os_upgrade: { "changed": false }

    - name: Check if a new Ubuntu release is available
      command: do-release-upgrade -c
      register: os_upgrade_check
      changed_when: false
      failed_when: 
        - os_upgrade_check.rc != 0
        - "'No new release found' not in os_upgrade_check.stdout"
        - "'There is no development version of an LTS available' not in os_upgrade_check.stdout"
      when: upgrade_os

    - name: Debug OS Upgrade Check Output
      debug:
        msg: "OS Upgrade Check Output: {{ os_upgrade_check.stdout }}"
      when: upgrade_os and os_upgrade_check is defined

    - name: Upgrade OS to the next Ubuntu release
      command: do-release-upgrade -f DistUpgradeViewNonInteractive
      async: 3600
      poll: 0
      register: os_upgrade
      when: 
       - upgrade_os
       - "'No new release found' not in os_upgrade_check.stdout"
       - "'There is no development version of an LTS available' not in os_upgrade_check.stdout"
      
  handlers:
    - name: Reboot system
      reboot:
        msg: "Rebooting to apply updates."
      when: os_upgrade.changed | default(false)

    - name: Restart SSH
      service:
        name: ssh
        state: restarted